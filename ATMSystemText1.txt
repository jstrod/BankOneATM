package atmsystem;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class ATMSystem extends JFrame implements ATMSystemInfo {
    private ArrayList<Integer> pins = new ArrayList<>();
    private ArrayList<Integer> deposits = new ArrayList<>();

    private JTextField pinField;
    private JTextField depositField;
    private JTextField withdrawField;

    private JPanel mainPanel;
    private JPanel transactionPanel;

    private JButton withdrawButton;
    private JButton viewBalanceButton;
    private JButton depositButton;

    @Override
    public void startATM() {}

    public ATMSystem() {
        setTitle("ATM System");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);
        mainPanel = new JPanel(new CardLayout());
        JPanel registerPanel = createRegisterPanel();
        mainPanel.add(registerPanel, "registerPanel");
        add(mainPanel);
        setVisible(true);
    }

    private JPanel createRegisterPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        JPanel inputPanel = new JPanel();
        GroupLayout layout = new GroupLayout(inputPanel);
        inputPanel.setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);
        JLabel pinLabel = new JLabel("PIN:");
        pinField = new JTextField();
        JButton registerButton = new JButton("Login");
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                registerUser();
            }
        });

        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(pinLabel))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(pinField)
                        .addComponent(registerButton)));
        layout.setVerticalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(pinLabel)
                        .addComponent(pinField))
                .addComponent(registerButton));
        panel.add(inputPanel, BorderLayout.CENTER);
        return panel;
    }

    private void createTransactionPanel() {
        transactionPanel = new JPanel(new BorderLayout());
        JPanel inputPanel = new JPanel();
        GroupLayout layout = new GroupLayout(inputPanel);
        inputPanel.setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);
        JLabel depositLabel = new JLabel("Deposit Amount:");
        JLabel withdrawLabel = new JLabel("Withdraw Amount:");
        depositField = new JTextField();
        withdrawField = new JTextField();
        depositButton = new JButton("Deposit");
        depositButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deposit();
            }
        });
        withdrawButton = new JButton("Withdraw");
        withdrawButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                withdraw();
            }
        });

        viewBalanceButton = new JButton("View Balance");
        viewBalanceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                viewBalance();
            }
        });

        layout.setHorizontalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(depositLabel)
                        .addComponent(withdrawLabel))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(depositField)
                        .addComponent(withdrawField))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(depositButton)
                        .addComponent(withdrawButton)
                        .addComponent(viewBalanceButton)));
        layout.setVerticalGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(depositLabel)
                        .addComponent(depositField)
                        .addComponent(depositButton))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(withdrawLabel)
                        .addComponent(withdrawField)
                        .addComponent(withdrawButton))
                .addComponent(viewBalanceButton));
        transactionPanel.add(inputPanel, BorderLayout.CENTER);
    }

    private void registerUser() {
        String pinText = pinField.getText();
        // Check if the PIN field is empty
        if (pinText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your PIN.");
            return;
        }
        // Check if the PIN is a four-digit number
        if (!pinText.matches("\\d{4}")) {
            JOptionPane.showMessageDialog(this, "PIN must be a four-digit number.");
            return;
        }
        int pin = Integer.parseInt(pinText);
        // Check if PIN is unique
        if (pins.contains(pin)) {
            JOptionPane.showMessageDialog(this, "PIN already registered.");
            return;
        }

        // Add the PIN to the list of registered PINs
        pins.add(pin);
        // Add a default initial deposit value of 0 for the new user
        deposits.add(0);
        // Create the transaction panel after successful registration
        createTransactionPanel();
        mainPanel.add(transactionPanel, "transactionPanel");
        CardLayout cardLayout = (CardLayout) mainPanel.getLayout();
        cardLayout.show(mainPanel, "transactionPanel");
    }

    private void deposit() {
        String userPIN = pinField.getText();
        String depositAmountText = depositField.getText();

        int depositAmount;
        try {
            depositAmount = Integer.parseInt(depositAmountText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid deposit amount.");
            return;
        }
        // Find the index of the user's PIN
        int index = pins.indexOf(Integer.parseInt(userPIN));
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "User not found.");
            return;
        }

        int currentBalance = deposits.get(index);
        currentBalance += depositAmount;
        deposits.set(index, currentBalance);

        // Display the updated balance
        JOptionPane.showMessageDialog(this, "Deposit successful. Your current balance is: " + currentBalance);
        // Reset deposit field
        depositField.setText("");
    }

    private void withdraw() {
        String userPIN = pinField.getText();
        String withdrawAmountText = withdrawField.getText();

        int withdrawAmount;
        try {
            withdrawAmount = Integer.parseInt(withdrawAmountText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid withdrawal amount.");
            return;
        }

        // Find the index of the user's PIN
        int index = pins.indexOf(Integer.parseInt(userPIN));
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "User not found.");
            return;
        }

        int currentBalance = deposits.get(index);
        if (withdrawAmount > currentBalance) {
            JOptionPane.showMessageDialog(this, "Insufficient funds.");
            return;
        }

        currentBalance -= withdrawAmount;
        deposits.set(index, currentBalance);

        // Display the updated balance
        JOptionPane.showMessageDialog(this, "Withdrawal successful. Your current balance is: " + currentBalance);
        // Reset deposit field
        withdrawField.setText("");
    }

    private void viewBalance() {
        String userPIN = pinField.getText();
        // Find the index of the user's PIN
        int index = pins.indexOf(Integer.parseInt(userPIN));
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "User not found.");
            return;
        }
        int currentBalance = deposits.get(index);
        // Display the current balance
        JOptionPane.showMessageDialog(this, "Your current balance is: " + currentBalance);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new ATMSystem();
            }
        });
    }
}

